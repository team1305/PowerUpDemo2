// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc1305.PowerUpDemo.subsystems;

import org.usfirst.frc1305.PowerUpDemo.Robot;
import org.usfirst.frc1305.PowerUpDemo.RobotMap;
import edu.wpi.first.wpilibj.command.Subsystem;

import com.ctre.phoenix.motorcontrol.NeutralMode;
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class Intake extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

	boolean isClawClosed = true;
	
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    //private final Solenoid claw = RobotMap.intakeClaw;
    ////private final Solenoid clawRight = RobotMap.intakeClawRight;
    private final WPI_TalonSRX armLeft = RobotMap.intakeArmLeft;
    private final WPI_TalonSRX armRight = RobotMap.intakeArmRight;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

   

    
    public Intake() {
    	
    	armLeft.setNeutralMode(NeutralMode.Brake);
    	armRight.setNeutralMode(NeutralMode.Brake);
		
    	// armLeft is on a 30A breaker
    	armLeft.configPeakCurrentLimit(35, 10); /* 35 A */
    	armLeft.configPeakCurrentDuration(200, 10); /* 200ms */
    	armLeft.configContinuousCurrentLimit(30, 10); /* 30A */
    	armLeft.enableCurrentLimit(true); /* turn it on */
    	
    	// armRight is on a 30A breaker
    	armRight.configPeakCurrentLimit(35, 10); /* 35 A */
    	armRight.configPeakCurrentDuration(200, 10); /* 200ms */
    	armRight.configContinuousCurrentLimit(30, 10); /* 30A */
    	armRight.enableCurrentLimit(true); /* turn it on */
    	
    }
    
    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }

    @Override
    public void periodic() {
        // Put code here to be run every loop

    }
    
    public void intakeSpeed(double nspeed) {
    	armLeft.set(nspeed);
    	armRight.set(nspeed);
    	
    	Robot.rgbledCAN.LEDblue();
    }
    
    public void intakeOff() {
    	armLeft.set(0);
    	armRight.set(0);
    }

//    public void ClawOpen() {
//    	this.claw.set(false);
//    	////this.clawRight.set(false);
//    	isClawClosed = false;
//    }
//    
//    public void ClawClose() {
//    	this.claw.set(true);
//    	////this.clawRight.set(true);
//    	isClawClosed = true;
//    	
//    }
    
    
//    public void toggleClaw() {
//    	if (isClawClosed) {
//    		ClawOpen();
//    	} else {
//    		ClawClose();
//    	}
//    	
//    }
   
    
    




}

